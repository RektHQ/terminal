"use client"

import { useState, useEffect, useRef } from "react"
import { useTheme } from "../contexts/theme-context"
import {
  exploitStatsByYear,
  exploitStatsByCategory,
  exploitStatsByVulnerability,
  monthlyExploits2025,
  exploitRecoveryStats,
} from "../data/mock-exploit-stats"

export function ExploitStats() {
  const { theme } = useTheme()
  const [activeTab, setActiveTab] = useState<"yearly" | "category" | "vulnerability" | "monthly" | "recovery">("yearly")
  const yearlyChartRef = useRef<HTMLCanvasElement>(null)
  const categoryChartRef = useRef<HTMLCanvasElement>(null)
  const vulnerabilityChartRef = useRef<HTMLCanvasElement>(null)
  const monthlyChartRef = useRef<HTMLCanvasElement>(null)
  const recoveryChartRef = useRef<HTMLCanvasElement>(null)

  const borderClass = theme === "hacker" ? "border-red-500/30" : "border-white/30"
  const headerClass = theme === "hacker" ? "text-red-500" : "text-white"
  const textClass = theme === "hacker" ? "terminal-text" : "text-white font-mono"
  const activeTabClass =
    theme === "hacker" ? "bg-red-900/30 text-red-400 border-red-500" : "bg-gray-800 text-white border-white"
  const inactiveTabClass =
    theme === "hacker"
      ? "bg-transparent text-green-500 hover:bg-red-900/10 border-transparent"
      : "bg-transparent text-gray-400 hover:bg-gray-800 border-transparent"

  // Draw yearly chart
  useEffect(() => {
    if (!yearlyChartRef.current || activeTab !== "yearly") return

    const canvas = yearlyChartRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    const barColor = theme === "hacker" ? "#ff3333" : "#ff6666"
    const textColor = theme === "hacker" ? "#00ff00" : "#ffffff"
    const gridColor = theme === "hacker" ? "rgba(0, 255, 0, 0.2)" : "rgba(255, 255, 255, 0.2)"

    const padding = 40
    const chartWidth = canvas.width - padding * 2
    const chartHeight = canvas.height - padding * 2

    // Find max value for scaling
    const maxValue = Math.max(...exploitStatsByYear.map((item) => item.amount))

    // Draw grid lines
    ctx.strokeStyle = gridColor
    ctx.lineWidth = 0.5

    for (let i = 0; i <= 5; i++) {
      const y = padding + chartHeight - (i / 5) * chartHeight

      ctx.beginPath()
      ctx.moveTo(padding, y)
      ctx.lineTo(padding + chartWidth, y)
      ctx.stroke()

      // Draw y-axis labels
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "right"
      ctx.fillText(`$${((maxValue * i) / 5 / 1000000000).toFixed(1)}B`, padding - 5, y + 3)
    }

    // Draw bars
    const barWidth = (chartWidth / exploitStatsByYear.length) * 0.8
    const barSpacing = (chartWidth / exploitStatsByYear.length) * 0.2

    exploitStatsByYear.forEach((item, i) => {
      const barHeight = (item.amount / maxValue) * chartHeight
      const x = padding + i * (barWidth + barSpacing) + barSpacing / 2
      const y = padding + chartHeight - barHeight

      // Draw bar
      ctx.fillStyle = barColor
      ctx.fillRect(x, y, barWidth, barHeight)

      // Draw x-axis label
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "center"
      ctx.fillText(item.year.toString(), x + barWidth / 2, padding + chartHeight + 15)

      // Draw value on top of bar
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "center"
      ctx.fillText(`$${(item.amount / 1000000000).toFixed(1)}B`, x + barWidth / 2, y - 5)
    })

    // Draw title
    ctx.fillStyle = textColor
    ctx.font = "bold 12px monospace"
    ctx.textAlign = "center"
    ctx.fillText("Total Value Lost by Year", canvas.width / 2, 15)
  }, [theme, activeTab])

  // Draw category chart
  useEffect(() => {
    if (!categoryChartRef.current || activeTab !== "category") return

    const canvas = categoryChartRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    const colors =
      theme === "hacker"
        ? ["#ff3333", "#00ff00", "#00ccff", "#ffff00", "#cc00ff", "#ff9900"]
        : ["#ff6666", "#66ff66", "#66ddff", "#ffff66", "#dd66ff", "#ffaa33"]

    const textColor = theme === "hacker" ? "#00ff00" : "#ffffff"

    const centerX = canvas.width / 2
    const centerY = canvas.height / 2
    const radius = Math.min(centerX, centerY) - 20

    // Calculate total for percentages
    const total = exploitStatsByCategory.reduce((sum, item) => sum + item.amount, 0)

    // Draw pie chart
    let startAngle = 0

    exploitStatsByCategory.forEach((item, i) => {
      const sliceAngle = (item.amount / total) * 2 * Math.PI

      ctx.beginPath()
      ctx.moveTo(centerX, centerY)
      ctx.arc(centerX, centerY, radius, startAngle, startAngle + sliceAngle)
      ctx.closePath()

      ctx.fillStyle = colors[i % colors.length]
      ctx.fill()

      // Calculate position for label
      const labelAngle = startAngle + sliceAngle / 2
      const labelRadius = radius * 0.7
      const labelX = centerX + Math.cos(labelAngle) * labelRadius
      const labelY = centerY + Math.sin(labelAngle) * labelRadius

      // Draw percentage label
      const percentage = ((item.amount / total) * 100).toFixed(1)
      ctx.fillStyle = "#000000"
      ctx.font = "bold 10px monospace"
      ctx.textAlign = "center"
      ctx.fillText(`${percentage}%`, labelX, labelY)

      startAngle += sliceAngle
    })

    // Draw legend
    const legendX = 10
    let legendY = canvas.height - 10 - exploitStatsByCategory.length * 15

    exploitStatsByCategory.forEach((item, i) => {
      // Draw color box
      ctx.fillStyle = colors[i % colors.length]
      ctx.fillRect(legendX, legendY - 8, 10, 10)

      // Draw label
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "left"
      ctx.fillText(`${item.category}: $${(item.amount / 1000000000).toFixed(1)}B`, legendX + 15, legendY)

      legendY += 15
    })

    // Draw title
    ctx.fillStyle = textColor
    ctx.font = "bold 12px monospace"
    ctx.textAlign = "center"
    ctx.fillText("Exploits by Category", canvas.width / 2, 15)
  }, [theme, activeTab])

  // Draw vulnerability chart
  useEffect(() => {
    if (!vulnerabilityChartRef.current || activeTab !== "vulnerability") return

    const canvas = vulnerabilityChartRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    const barColor = theme === "hacker" ? "#00ff00" : "#66ff66"
    const textColor = theme === "hacker" ? "#00ff00" : "#ffffff"
    const gridColor = theme === "hacker" ? "rgba(0, 255, 0, 0.2)" : "rgba(255, 255, 255, 0.2)"

    const padding = 120
    const chartWidth = canvas.width - padding - 20
    const chartHeight = canvas.height - 60

    // Draw grid lines
    ctx.strokeStyle = gridColor
    ctx.lineWidth = 0.5

    for (let i = 0; i <= 5; i++) {
      const x = padding + (i / 5) * chartWidth

      ctx.beginPath()
      ctx.moveTo(x, 30)
      ctx.lineTo(x, 30 + chartHeight)
      ctx.stroke()

      // Draw x-axis labels
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "center"
      ctx.fillText(`${i * 20}%`, x, 30 + chartHeight + 15)
    }

    // Draw bars
    const barHeight = (chartHeight / exploitStatsByVulnerability.length) * 0.7
    const barSpacing = (chartHeight / exploitStatsByVulnerability.length) * 0.3

    exploitStatsByVulnerability.forEach((item, i) => {
      const barWidth = (item.percentage / 100) * chartWidth
      const x = padding
      const y = 30 + i * (barHeight + barSpacing) + barSpacing / 2

      // Draw bar
      ctx.fillStyle = barColor
      ctx.fillRect(x, y, barWidth, barHeight)

      // Draw y-axis label
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "right"
      ctx.fillText(item.vulnerability, padding - 5, y + barHeight / 2 + 3)

      // Draw percentage at end of bar
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "left"
      ctx.fillText(`${item.percentage}%`, x + barWidth + 5, y + barHeight / 2 + 3)
    })

    // Draw title
    ctx.fillStyle = textColor
    ctx.font = "bold 12px monospace"
    ctx.textAlign = "center"
    ctx.fillText("Exploits by Vulnerability Type", canvas.width / 2, 15)
  }, [theme, activeTab])

  // Draw monthly chart
  useEffect(() => {
    if (!monthlyChartRef.current || activeTab !== "monthly") return

    const canvas = monthlyChartRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    const barColor = theme === "hacker" ? "#ff3333" : "#ff6666"
    const lineColor = theme === "hacker" ? "#00ff00" : "#66ff66"
    const textColor = theme === "hacker" ? "#00ff00" : "#ffffff"
    const gridColor = theme === "hacker" ? "rgba(0, 255, 0, 0.2)" : "rgba(255, 255, 255, 0.2)"

    const padding = 40
    const chartWidth = canvas.width - padding * 2
    const chartHeight = canvas.height - padding * 2

    // Find max values for scaling
    const maxCount = Math.max(...monthlyExploits2025.map((item) => item.count))
    const maxAmount = Math.max(...monthlyExploits2025.map((item) => item.amount))

    // Draw grid lines
    ctx.strokeStyle = gridColor
    ctx.lineWidth = 0.5

    for (let i = 0; i <= 5; i++) {
      const y = padding + chartHeight - (i / 5) * chartHeight

      ctx.beginPath()
      ctx.moveTo(padding, y)
      ctx.lineTo(padding + chartWidth, y)
      ctx.stroke()

      // Draw left y-axis labels (count)
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "right"
      ctx.fillText(`${Math.round((maxCount * i) / 5)}`, padding - 5, y + 3)

      // Draw right y-axis labels (amount)
      ctx.textAlign = "left"
      ctx.fillText(`$${((maxAmount * i) / 5 / 1000000).toFixed(0)}M`, padding + chartWidth + 5, y + 3)
    }

    // Draw bars and line
    const barWidth = (chartWidth / monthlyExploits2025.length) * 0.8
    const barSpacing = (chartWidth / monthlyExploits2025.length) * 0.2

    // Draw bars (count)
    monthlyExploits2025.forEach((item, i) => {
      const barHeight = (item.count / maxCount) * chartHeight
      const x = padding + i * (barWidth + barSpacing) + barSpacing / 2
      const y = padding + chartHeight - barHeight

      // Draw bar
      ctx.fillStyle = barColor
      ctx.fillRect(x, y, barWidth, barHeight)

      // Draw x-axis label
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "center"
      ctx.fillText(item.month, x + barWidth / 2, padding + chartHeight + 15)
    })

    // Draw line (amount)
    ctx.beginPath()
    monthlyExploits2025.forEach((item, i) => {
      const x = padding + i * (barWidth + barSpacing) + barSpacing / 2 + barWidth / 2
      const y = padding + chartHeight - (item.amount / maxAmount) * chartHeight

      if (i === 0) {
        ctx.moveTo(x, y)
      } else {
        ctx.lineTo(x, y)
      }
    })
    ctx.strokeStyle = lineColor
    ctx.lineWidth = 2
    ctx.stroke()

    // Draw dots on line
    monthlyExploits2025.forEach((item, i) => {
      const x = padding + i * (barWidth + barSpacing) + barSpacing / 2 + barWidth / 2
      const y = padding + chartHeight - (item.amount / maxAmount) * chartHeight

      ctx.beginPath()
      ctx.arc(x, y, 4, 0, 2 * Math.PI)
      ctx.fillStyle = lineColor
      ctx.fill()

      // Draw amount above dot
      if (item.amount > 0) {
        ctx.fillStyle = textColor
        ctx.font = "10px monospace"
        ctx.textAlign = "center"
        ctx.fillText(`$${(item.amount / 1000000).toFixed(0)}M`, x, y - 10)
      }
    })

    // Draw legend
    ctx.fillStyle = barColor
    ctx.fillRect(padding, 15, 10, 10)
    ctx.fillStyle = textColor
    ctx.font = "10px monospace"
    ctx.textAlign = "left"
    ctx.fillText("Exploit Count", padding + 15, 23)

    ctx.strokeStyle = lineColor
    ctx.lineWidth = 2
    ctx.beginPath()
    ctx.moveTo(padding + 100, 20)
    ctx.lineTo(padding + 130, 20)
    ctx.stroke()
    ctx.beginPath()
    ctx.arc(padding + 115, 20, 4, 0, 2 * Math.PI)
    ctx.fillStyle = lineColor
    ctx.fill()
    ctx.fillStyle = textColor
    ctx.fillText("Value Lost", padding + 135, 23)

    // Draw title
    ctx.fillStyle = textColor
    ctx.font = "bold 12px monospace"
    ctx.textAlign = "center"
    ctx.fillText("2025 Monthly Exploit Trends", canvas.width / 2, 15)
  }, [theme, activeTab])

  // Draw recovery chart
  useEffect(() => {
    if (!recoveryChartRef.current || activeTab !== "recovery") return

    const canvas = recoveryChartRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    const colors = theme === "hacker" ? ["#00ff00", "#ffff00", "#ff3333"] : ["#66ff66", "#ffff66", "#ff6666"]

    const textColor = theme === "hacker" ? "#00ff00" : "#ffffff"

    const centerX = canvas.width / 2
    const centerY = canvas.height / 2
    const radius = Math.min(centerX, centerY) - 20

    // Calculate total for percentages
    const total = exploitRecoveryStats.reduce((sum, item) => sum + item.amount, 0)

    // Draw pie chart
    let startAngle = 0

    exploitRecoveryStats.forEach((item, i) => {
      const sliceAngle = (item.amount / total) * 2 * Math.PI

      ctx.beginPath()
      ctx.moveTo(centerX, centerY)
      ctx.arc(centerX, centerY, radius, startAngle, startAngle + sliceAngle)
      ctx.closePath()

      ctx.fillStyle = colors[i % colors.length]
      ctx.fill()

      // Calculate position for label
      const labelAngle = startAngle + sliceAngle / 2
      const labelRadius = radius * 0.7
      const labelX = centerX + Math.cos(labelAngle) * labelRadius
      const labelY = centerY + Math.sin(labelAngle) * labelRadius

      // Draw percentage label
      const percentage = ((item.amount / total) * 100).toFixed(1)
      ctx.fillStyle = "#000000"
      ctx.font = "bold 10px monospace"
      ctx.textAlign = "center"
      ctx.fillText(`${percentage}%`, labelX, labelY)

      startAngle += sliceAngle
    })

    // Draw legend
    const legendX = 10
    let legendY = canvas.height - 10 - exploitRecoveryStats.length * 15

    exploitRecoveryStats.forEach((item, i) => {
      // Draw color box
      ctx.fillStyle = colors[i % colors.length]
      ctx.fillRect(legendX, legendY - 8, 10, 10)

      // Draw label
      ctx.fillStyle = textColor
      ctx.font = "10px monospace"
      ctx.textAlign = "left"
      ctx.fillText(`${item.status}: $${(item.amount / 1000000000).toFixed(1)}B`, legendX + 15, legendY)

      legendY += 15
    })

    // Draw title
    ctx.fillStyle = textColor
    ctx.font = "bold 12px monospace"
    ctx.textAlign = "center"
    ctx.fillText("Exploit Recovery Status (2020-2025)", canvas.width / 2, 15)

    // Draw total
    ctx.fillStyle = textColor
    ctx.font = "10px monospace"
    ctx.textAlign = "center"
    ctx.fillText(`Total: $${(total / 1000000000).toFixed(1)}B lost in exploits`, canvas.width / 2, canvas.height - 10)
  }, [theme, activeTab])

  return (
    <div className={`border ${borderClass} p-4 bg-black/50 my-4`}>
      <h3 className={`${headerClass} text-lg font-bold mb-4`}>DeFi Exploit Statistics</h3>

      <div className="flex border-b border-gray-700 mb-4 overflow-x-auto">
        <button
          className={`px-3 py-2 border-b-2 -mb-px whitespace-nowrap ${activeTab === "yearly" ? activeTabClass : inactiveTabClass}`}
          onClick={() => setActiveTab("yearly")}
        >
          Yearly Trends
        </button>
        <button
          className={`px-3 py-2 border-b-2 -mb-px whitespace-nowrap ${activeTab === "category" ? activeTabClass : inactiveTabClass}`}
          onClick={() => setActiveTab("category")}
        >
          By Category
        </button>
        <button
          className={`px-3 py-2 border-b-2 -mb-px whitespace-nowrap ${activeTab === "vulnerability" ? activeTabClass : inactiveTabClass}`}
          onClick={() => setActiveTab("vulnerability")}
        >
          By Vulnerability
        </button>
        <button
          className={`px-3 py-2 border-b-2 -mb-px whitespace-nowrap ${activeTab === "monthly" ? activeTabClass : inactiveTabClass}`}
          onClick={() => setActiveTab("monthly")}
        >
          2025 Monthly
        </button>
        <button
          className={`px-3 py-2 border-b-2 -mb-px whitespace-nowrap ${activeTab === "recovery" ? activeTabClass : inactiveTabClass}`}
          onClick={() => setActiveTab("recovery")}
        >
          Recovery Status
        </button>
      </div>

      <div className="relative h-[400px] bg-black/30">
        <canvas
          ref={yearlyChartRef}
          width={600}
          height={400}
          className={`absolute top-0 left-0 w-full h-full ${activeTab === "yearly" ? "block" : "hidden"}`}
        />
        <canvas
          ref={categoryChartRef}
          width={600}
          height={400}
          className={`absolute top-0 left-0 w-full h-full ${activeTab === "category" ? "block" : "hidden"}`}
        />
        <canvas
          ref={vulnerabilityChartRef}
          width={600}
          height={400}
          className={`absolute top-0 left-0 w-full h-full ${activeTab === "vulnerability" ? "block" : "hidden"}`}
        />
        <canvas
          ref={monthlyChartRef}
          width={600}
          height={400}
          className={`absolute top-0 left-0 w-full h-full ${activeTab === "monthly" ? "block" : "hidden"}`}
        />
        <canvas
          ref={recoveryChartRef}
          width={600}
          height={400}
          className={`absolute top-0 left-0 w-full h-full ${activeTab === "recovery" ? "block" : "hidden"}`}
        />
      </div>

      <div className="mt-4 text-center">
        <p className="text-gray-400 text-xs">Data compiled from on-chain analysis and Rekt News archives</p>
      </div>
    </div>
  )
}

